'use client';
import axios from 'axios';
import * as z from 'zod';
import { useRouter } from 'next/navigation';
import { Heading } from '@/components/heading';
import { Heading1, Music } from 'lucide-react';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import { formSchema } from './constants';
import { Form, FormControl, FormField, FormItem } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { useState } from 'react';
import { response } from 'express';
import { Loader } from '@/components/loader';
import { Empty } from '@/components/ui/empty';
import { MessageCreateParams } from '@anthropic-ai/sdk/resources/messages.mjs';
import Anthropic from '@anthropic-ai/sdk';
import { Stream } from '@anthropic-ai/sdk/streaming.mjs';
import Link from 'next/link';
import { Slider } from '@/components/ui/slider';

// Define types for the content blocks
interface ToolUseBlock {
  tool: string;
  use: string;
}

interface ContentBlock {
  text?: string;
  type: 'text' | 'toolUse';
  toolUse?: ToolUseBlock;
}

// Define a more specific Message type
interface Message {
  role: 'user' | 'assistant';
  content: ContentBlock[];
}

const TextPage: React.FC = () => {



   let plus1 =  'כמה לפשט את הטקסט' 
plus1 += '?'

  
  let plus2 = 'רוצה להוסיף בקשות מיוחדות'
  plus2 += '?'
  

  const router = useRouter();
  const [messages, setMessages] = useState<Message[]>([]);
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      prompt: '',
    },
  });

  const isLoading = form.formState.isSubmitting;

  const onSubmit = async (values: z.infer<typeof formSchema>) => {
    try {
      const userMessage: Message = {
        role: 'user',
        content: [{ type: 'text', text: values.prompt }],
      };
      const newMessages = [...messages, userMessage];
      const response = await axios.post<Message>('/api/text', {
        messages: newMessages,
      });
      console.log(response.data.content[0]);
      setMessages((current) => [...current, response.data]);
    } catch (error: any) {
      console.log(error);
      //TODO open pro modal
    } finally {
      router.refresh();
    }
  };


  return (
    <div className='bg-bg-lilac px-14 py-8'>
      <div className='flex space-x-4 flex-row-reverse'>
        <Link href='/text'>
          <div className='ml-4 border border-white rounded-md bg-white px-8 pt-4 font-assistant'>
            <h1>המרה לטקסט</h1>
          </div>
        </Link>
        <Link href='/pecs'>
          <div className='ml-4 px-8 pt-4'>
            <h1>המרה לתמונה</h1>
          </div>
        </Link>
      </div>

      <div className='flex flex-row-reverse'>
        <div className='flex-col w-1/2 h-[75vh] overflow-auto bg-white border-l-2 border-gray-300 text-right'>
          <Form {...form}>
            <form className='p-4' onSubmit={form.handleSubmit(onSubmit)}>
              <FormField
                name='prompt'
                render={({ field }) => (
                  <FormItem className='col-span-12 lg:col-span-10'>
                    {/* <FormItem className='col-span-12 lg:col-span-10'> */}
                    {/* <FormControl className='m-0 p-0'> */}
                    <FormControl>
                      <textarea
                        rows={8}
                        className='border border-gray-300 outline-none focus-visible:ring-0 focus-visible:ring-transparent h-1/2-screen text-right w-full rounded-md p-4 text-xl'
                        disabled={isLoading}
                        placeholder='הכנס כאן טקסט'
                        {...field}
                      />
                    </FormControl>
                  </FormItem>
                )}
              />
                            <div className='flex flex-col p-4 gap-y-4 rtl:ml-0'>

                <div className='md:text-2xl text-right' dir="rtl">          
                {plus1}
</div>
                <div className='flex flex-row-reverse'>
                  <div className='w-1/2'>
                    <Slider
                      defaultValue={[25]}
                      max={50}
                      step={25}
                      onValueChange={(value) => console.log(value)}
                      dir='rtl'
                    />
                    <div className='flex flex-row-reverse justify-between text-right mb-2 p-4 '>

                      <span>רמה 1</span>
                      <span>רמה 2</span>
                      <span>רמה 3</span>
                    </div>
                  </div>
                </div>
                <div className='md:text-2xl text-right' dir="rtl">
                {plus2}
                </div>
                <FormField
                  name='additionalPrompt'
                  render={({ field }) => (
                    <FormItem>
                      <FormControl>
                        <textarea
                          rows={3}
                          className='border border-gray-300 outline-none focus-visible:ring-0 focus-visible:ring-transparent h-1/2-screen text-right w-full rounded-md'
                          disabled={isLoading}
                          placeholder='למשל תשתמשו בדימויים של חיות'
                          {...field}
                        />
                      </FormControl>
                    </FormItem>
                  )}
                />
                <div>
                  <Button
                    className='col-span-12 lg:col-span-2 p-4 text-lg' // Added p-4 for padding and text-lg for larger text
                    disabled={isLoading}
                  >
                    המרה
                  </Button>
                </div>
              </div>
            </form>
          </Form>
        </div>
        {isLoading && (
          <div className='p-20'>

            <Loader />
          </div>
        )}


        <div className='bg-white border-gray-300 flex p-4 justify-center w-1/2'>
          <div>
            <div className='text-right '>
              {messages.length === 0 && !isLoading && <Empty label='' />}

              {messages.map((message, index) => (

                <div key={index} className='p-4 border rounded-lg my-4 text-xl'> 
                  {message.content[0] && message.content[0].type === 'text'
                    ? message.content[0].text
                    : ''}
                </div>
              ))}
            </div>
        </div>
        </div>
      </div>
    </div>
  );
};

export default TextPage;
